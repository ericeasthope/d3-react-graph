'use strict';

var _interopRequireWildcard = require('@babel/runtime/helpers/interopRequireWildcard');

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports['default'] = void 0;

var d3 = _interopRequireWildcard(require('d3'));

// components/LinkText.tsx
var LinkText = function LinkText(_ref) {
  var children = _ref.children,
    links = _ref.links;
  var g = d3
    .select('.links')
    .selectAll('g')
    .data(links)
    .join(
      function (enter) {
        return enter.append('g');
      },
      function (update) {
        return update;
      },
      function (exit) {
        return exit.remove();
      },
    );
  children.map(function (c) {
    var text = g
      .append('text')
      .text(c.text)
      .attr('text-anchor', 'middle')
      .style('font-size', c.fontSize)
      .attr('fill', c.fill)
      .attr('dy', c.dy)
      .attr('alignment-baseline', 'middle');
    text
      .on('mouseover', function () {
        c.onMouseOver ? c.onMouseOver(d3.select(this)) : null;
      })
      .on('mouseout', function () {
        c.onMouseOut ? c.onMouseOut(d3.select(this)) : null;
      });
    c.onClick
      ? text.on('click', function (d) {
          if (!d3.event.defaultPrevented) {
            c.onClick(d3.select(this), d);
          } // If dragging ...

          return;
        })
      : null;
    text.append('title').text(c.title);
  });

  var tick = function tick() {
    g
      /*
    .attr('x1', (d: D3Link & { source: { x: number } }) => d.source.x)
    .attr('y1', (d: D3Link & { source: { y: number } }) => d.source.y)
    .attr('x2', (d: D3Link & { target: { x: number } }) => d.target.x)
    .attr('y2', (d: D3Link & { target: { y: number } }) => d.target.y);
    */
      .attr('transform', function (d) {
        return (
          'translate(' +
          (d.source.x + d.target.x) / 2 +
          ',' +
          (d.source.y + d.target.y) / 2 +
          ')' +
          'rotate(' +
          (180 / Math.PI) *
            Math.atan2(d.target.y - d.source.y, d.target.x - d.source.x) +
          ')'
        );
      });
  };

  return {
    name: 'text',
    tick: tick,
  };
};

var _default = LinkText;
exports['default'] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NvbXBvbmVudHMvTGlua1RleHQudHN4Il0sIm5hbWVzIjpbIkxpbmtUZXh0IiwiY2hpbGRyZW4iLCJsaW5rcyIsImciLCJkMyIsInNlbGVjdCIsInNlbGVjdEFsbCIsImRhdGEiLCJqb2luIiwiZW50ZXIiLCJhcHBlbmQiLCJ1cGRhdGUiLCJleGl0IiwicmVtb3ZlIiwibWFwIiwiYyIsInRleHQiLCJhdHRyIiwic3R5bGUiLCJmb250U2l6ZSIsImZpbGwiLCJkeSIsIm9uIiwib25Nb3VzZU92ZXIiLCJvbk1vdXNlT3V0Iiwib25DbGljayIsImQiLCJldmVudCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0aXRsZSIsInRpY2siLCJzb3VyY2UiLCJ4IiwidGFyZ2V0IiwieSIsIk1hdGgiLCJQSSIsImF0YW4yIiwibmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBR0E7O0FBSEE7QUFZQSxJQUFNQSxRQUFRLEdBQUcsU0FBWEEsUUFBVyxPQUE2QztBQUFBLE1BQTFDQyxRQUEwQyxRQUExQ0EsUUFBMEM7QUFBQSxNQUFoQ0MsS0FBZ0MsUUFBaENBLEtBQWdDO0FBQzVELE1BQU1DLENBQUMsR0FBR0MsRUFBRSxDQUNUQyxNQURPLENBQ0EsUUFEQSxFQUVQQyxTQUZPLENBRUcsR0FGSCxFQUdQQyxJQUhPLENBR0ZMLEtBSEUsRUFJUE0sSUFKTyxDQUtOLFVBQUNDLEtBQUQ7QUFBQSxXQUFXQSxLQUFLLENBQUNDLE1BQU4sQ0FBYSxHQUFiLENBQVg7QUFBQSxHQUxNLEVBTU4sVUFBQ0MsTUFBRDtBQUFBLFdBQVlBLE1BQVo7QUFBQSxHQU5NLEVBT04sVUFBQ0MsSUFBRDtBQUFBLFdBQVVBLElBQUksQ0FBQ0MsTUFBTCxFQUFWO0FBQUEsR0FQTSxDQUFWO0FBVUFaLEVBQUFBLFFBQVEsQ0FBQ2EsR0FBVCxDQUFhLFVBQUNDLENBQUQsRUFBTztBQUNsQixRQUFNQyxJQUFJLEdBQUdiLENBQUMsQ0FDWE8sTUFEVSxDQUNILE1BREcsRUFFVk0sSUFGVSxDQUVMRCxDQUFDLENBQUNDLElBRkcsRUFHVkMsSUFIVSxDQUdMLGFBSEssRUFHVSxRQUhWLEVBSVZDLEtBSlUsQ0FJSixXQUpJLEVBSVNILENBQUMsQ0FBQ0ksUUFKWCxFQUtWRixJQUxVLENBS0wsTUFMSyxFQUtHRixDQUFDLENBQUNLLElBTEwsRUFNVkgsSUFOVSxDQU1MLElBTkssRUFNQ0YsQ0FBQyxDQUFDTSxFQU5ILEVBT1ZKLElBUFUsQ0FPTCxvQkFQSyxFQU9pQixRQVBqQixDQUFiO0FBU0FELElBQUFBLElBQUksQ0FDRE0sRUFESCxDQUNNLFdBRE4sRUFDbUIsWUFBWTtBQUMzQlAsTUFBQUEsQ0FBQyxDQUFDUSxXQUFGLEdBQWdCUixDQUFDLENBQUNRLFdBQUYsQ0FBY25CLEVBQUUsQ0FBQ0MsTUFBSCxDQUFVLElBQVYsQ0FBZCxDQUFoQixHQUFpRCxJQUFqRDtBQUNELEtBSEgsRUFJR2lCLEVBSkgsQ0FJTSxVQUpOLEVBSWtCLFlBQVk7QUFDMUJQLE1BQUFBLENBQUMsQ0FBQ1MsVUFBRixHQUFlVCxDQUFDLENBQUNTLFVBQUYsQ0FBYXBCLEVBQUUsQ0FBQ0MsTUFBSCxDQUFVLElBQVYsQ0FBYixDQUFmLEdBQStDLElBQS9DO0FBQ0QsS0FOSDtBQVFBVSxJQUFBQSxDQUFDLENBQUNVLE9BQUYsR0FDSVQsSUFBSSxDQUFDTSxFQUFMLENBQVEsT0FBUixFQUFpQixVQUFVSSxDQUFWLEVBQWE7QUFDNUIsVUFBSSxDQUFDdEIsRUFBRSxDQUFDdUIsS0FBSCxDQUFTQyxnQkFBZCxFQUFnQztBQUM5QmIsUUFBQUEsQ0FBQyxDQUFDVSxPQUFGLENBQVVyQixFQUFFLENBQUNDLE1BQUgsQ0FBVSxJQUFWLENBQVYsRUFBMkJxQixDQUEzQjtBQUNELE9BSDJCLENBSzVCOzs7QUFDQTtBQUNELEtBUEQsQ0FESixHQVNJLElBVEo7QUFXQVYsSUFBQUEsSUFBSSxDQUFDTixNQUFMLENBQVksT0FBWixFQUFxQk0sSUFBckIsQ0FBMEJELENBQUMsQ0FBQ2MsS0FBNUI7QUFDRCxHQTlCRDs7QUFnQ0EsTUFBTUMsSUFBSSxHQUFHLFNBQVBBLElBQU8sR0FBTTtBQUNqQjNCLElBQUFBO0FBQ0U7Ozs7OztBQURELEtBT0VjLElBUEgsQ0FPUSxXQVBSLEVBT3FCLFVBQVVTLENBQVYsRUFBYTtBQUM5QixhQUNFLGVBQ0EsQ0FBQ0EsQ0FBQyxDQUFDSyxNQUFGLENBQVNDLENBQVQsR0FBYU4sQ0FBQyxDQUFDTyxNQUFGLENBQVNELENBQXZCLElBQTRCLENBRDVCLEdBRUEsR0FGQSxHQUdBLENBQUNOLENBQUMsQ0FBQ0ssTUFBRixDQUFTRyxDQUFULEdBQWFSLENBQUMsQ0FBQ08sTUFBRixDQUFTQyxDQUF2QixJQUE0QixDQUg1QixHQUlBLEdBSkEsR0FLQSxTQUxBLEdBTUMsTUFBTUMsSUFBSSxDQUFDQyxFQUFaLEdBQ0VELElBQUksQ0FBQ0UsS0FBTCxDQUFXWCxDQUFDLENBQUNPLE1BQUYsQ0FBU0MsQ0FBVCxHQUFhUixDQUFDLENBQUNLLE1BQUYsQ0FBU0csQ0FBakMsRUFBb0NSLENBQUMsQ0FBQ08sTUFBRixDQUFTRCxDQUFULEdBQWFOLENBQUMsQ0FBQ0ssTUFBRixDQUFTQyxDQUExRCxDQVBGLEdBUUEsR0FURjtBQVdELEtBbkJIO0FBb0JELEdBckJEOztBQXVCQSxTQUFPO0FBQ0xNLElBQUFBLElBQUksRUFBRSxNQUREO0FBRUxSLElBQUFBLElBQUksRUFBRUE7QUFGRCxHQUFQO0FBSUQsQ0F0RUQ7O2VBd0VlOUIsUSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNvbXBvbmVudHMvTGlua1RleHQudHN4XG5cbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5cbmltcG9ydCB7IEQzTGluayB9IGZyb20gJ3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2hpbGRyZW46IEpTWC5FbGVtZW50W107XG4gIGxpbmtzPzogRDNMaW5rW107XG59XG5cbmNvbnN0IExpbmtUZXh0ID0gKHsgY2hpbGRyZW4sIGxpbmtzIH06IFByb3BzKTogSlNYLkVsZW1lbnQgPT4ge1xuICBjb25zdCBnID0gZDNcbiAgICAuc2VsZWN0KCcubGlua3MnKVxuICAgIC5zZWxlY3RBbGwoJ2cnKVxuICAgIC5kYXRhKGxpbmtzKVxuICAgIC5qb2luKFxuICAgICAgKGVudGVyKSA9PiBlbnRlci5hcHBlbmQoJ2cnKSxcbiAgICAgICh1cGRhdGUpID0+IHVwZGF0ZSxcbiAgICAgIChleGl0KSA9PiBleGl0LnJlbW92ZSgpLFxuICAgICk7XG5cbiAgY2hpbGRyZW4ubWFwKChjKSA9PiB7XG4gICAgY29uc3QgdGV4dCA9IGdcbiAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgLnRleHQoYy50ZXh0KVxuICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIGMuZm9udFNpemUpXG4gICAgICAuYXR0cignZmlsbCcsIGMuZmlsbClcbiAgICAgIC5hdHRyKCdkeScsIGMuZHkpXG4gICAgICAuYXR0cignYWxpZ25tZW50LWJhc2VsaW5lJywgJ21pZGRsZScpO1xuXG4gICAgdGV4dFxuICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGMub25Nb3VzZU92ZXIgPyBjLm9uTW91c2VPdmVyKGQzLnNlbGVjdCh0aGlzKSkgOiBudWxsO1xuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGMub25Nb3VzZU91dCA/IGMub25Nb3VzZU91dChkMy5zZWxlY3QodGhpcykpIDogbnVsbDtcbiAgICAgIH0pO1xuXG4gICAgYy5vbkNsaWNrXG4gICAgICA/IHRleHQub24oJ2NsaWNrJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICBpZiAoIWQzLmV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgIGMub25DbGljayhkMy5zZWxlY3QodGhpcyksIGQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIGRyYWdnaW5nIC4uLlxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSlcbiAgICAgIDogbnVsbDtcblxuICAgIHRleHQuYXBwZW5kKCd0aXRsZScpLnRleHQoYy50aXRsZSk7XG4gIH0pO1xuXG4gIGNvbnN0IHRpY2sgPSAoKSA9PiB7XG4gICAgZ1xuICAgICAgLypcbiAgICAgIC5hdHRyKCd4MScsIChkOiBEM0xpbmsgJiB7IHNvdXJjZTogeyB4OiBudW1iZXIgfSB9KSA9PiBkLnNvdXJjZS54KVxuICAgICAgLmF0dHIoJ3kxJywgKGQ6IEQzTGluayAmIHsgc291cmNlOiB7IHk6IG51bWJlciB9IH0pID0+IGQuc291cmNlLnkpXG4gICAgICAuYXR0cigneDInLCAoZDogRDNMaW5rICYgeyB0YXJnZXQ6IHsgeDogbnVtYmVyIH0gfSkgPT4gZC50YXJnZXQueClcbiAgICAgIC5hdHRyKCd5MicsIChkOiBEM0xpbmsgJiB7IHRhcmdldDogeyB5OiBudW1iZXIgfSB9KSA9PiBkLnRhcmdldC55KTtcbiAgICAgICovXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAndHJhbnNsYXRlKCcgK1xuICAgICAgICAgIChkLnNvdXJjZS54ICsgZC50YXJnZXQueCkgLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIChkLnNvdXJjZS55ICsgZC50YXJnZXQueSkgLyAyICtcbiAgICAgICAgICAnKScgK1xuICAgICAgICAgICdyb3RhdGUoJyArXG4gICAgICAgICAgKDE4MCAvIE1hdGguUEkpICpcbiAgICAgICAgICAgIE1hdGguYXRhbjIoZC50YXJnZXQueSAtIGQuc291cmNlLnksIGQudGFyZ2V0LnggLSBkLnNvdXJjZS54KSArXG4gICAgICAgICAgJyknXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICd0ZXh0JyxcbiAgICB0aWNrOiB0aWNrLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTGlua1RleHQ7XG4iXX0=
