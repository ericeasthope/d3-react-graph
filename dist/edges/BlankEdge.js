"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var d3 = _interopRequireWildcard(require("d3"));

// components/BlankEdge.tsx
var BlankEdge = function BlankEdge(_ref) {
  var edges = _ref.edges,
      dataKey = _ref.dataKey,
      attrs = _ref.attrs,
      styles = _ref.styles,
      title = _ref.title,
      onMouseOver = _ref.onMouseOver,
      onMouseOut = _ref.onMouseOut,
      onClick = _ref.onClick,
      onDoubleClick = _ref.onDoubleClick;
  var blank = d3.select('.edges').selectAll('g').data(edges, dataKey).join(function (enter) {
    return enter.append('g');
  }, function (update) {
    return update;
  }, function (exit) {
    return exit.remove();
  });
  Object.entries(attrs).map(function (attr) {
    var _attr = (0, _slicedToArray2["default"])(attr, 2),
        name = _attr[0],
        value = _attr[1];

    blank.attr(name, value);
  });
  Object.entries(styles).map(function (style) {
    var _style = (0, _slicedToArray2["default"])(style, 2),
        name = _style[0],
        value = _style[1];

    blank.style(name, value);
  });
  blank.append('title').text(title);
  blank.on('mouseover', onMouseOver ? onMouseOver : null).on('mouseout', onMouseOut ? onMouseOut : null).on('click', onClick ? onClick : null).on('dblclick', onDoubleClick ? onDoubleClick : null);
  return {
    name: 'blank',
    tick: function tick() {
      return blank.attr('transform', function (d) {
        return "translate(".concat(1 / 2 * (d.source.x + d.target.x), ", ").concat(1 / 2 * (d.source.y + d.target.y), ")");
      });
    }
  };
};

var _default = BlankEdge;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvbXBvbmVudHMvZWRnZXMvQmxhbmtFZGdlLnRzeCJdLCJuYW1lcyI6WyJCbGFua0VkZ2UiLCJlZGdlcyIsImRhdGFLZXkiLCJhdHRycyIsInN0eWxlcyIsInRpdGxlIiwib25Nb3VzZU92ZXIiLCJvbk1vdXNlT3V0Iiwib25DbGljayIsIm9uRG91YmxlQ2xpY2siLCJibGFuayIsImQzIiwic2VsZWN0Iiwic2VsZWN0QWxsIiwiZGF0YSIsImpvaW4iLCJlbnRlciIsImFwcGVuZCIsInVwZGF0ZSIsImV4aXQiLCJyZW1vdmUiLCJPYmplY3QiLCJlbnRyaWVzIiwibWFwIiwiYXR0ciIsIm5hbWUiLCJ2YWx1ZSIsInN0eWxlIiwidGV4dCIsIm9uIiwidGljayIsImQiLCJzb3VyY2UiLCJ4IiwidGFyZ2V0IiwieSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUdBOztBQUhBO0FBa0JBLElBQU1BLFNBQVMsR0FBRyxTQUFaQSxTQUFZLE9BYWI7QUFBQSxNQVpIQyxLQVlHLFFBWkhBLEtBWUc7QUFBQSxNQVhIQyxPQVdHLFFBWEhBLE9BV0c7QUFBQSxNQVZIQyxLQVVHLFFBVkhBLEtBVUc7QUFBQSxNQVRIQyxNQVNHLFFBVEhBLE1BU0c7QUFBQSxNQVJIQyxLQVFHLFFBUkhBLEtBUUc7QUFBQSxNQVBIQyxXQU9HLFFBUEhBLFdBT0c7QUFBQSxNQU5IQyxVQU1HLFFBTkhBLFVBTUc7QUFBQSxNQUxIQyxPQUtHLFFBTEhBLE9BS0c7QUFBQSxNQUpIQyxhQUlHLFFBSkhBLGFBSUc7QUFDSCxNQUFNQyxLQUFLLEdBQUdDLEVBQUUsQ0FDYkMsTUFEVyxDQUNKLFFBREksRUFFWEMsU0FGVyxDQUVELEdBRkMsRUFHWEMsSUFIVyxDQUdOYixLQUhNLEVBR0NDLE9BSEQsRUFJWGEsSUFKVyxDQUtWLFVBQUNDLEtBQUQ7QUFBQSxXQUFXQSxLQUFLLENBQUNDLE1BQU4sQ0FBYSxHQUFiLENBQVg7QUFBQSxHQUxVLEVBTVYsVUFBQ0MsTUFBRDtBQUFBLFdBQVlBLE1BQVo7QUFBQSxHQU5VLEVBT1YsVUFBQ0MsSUFBRDtBQUFBLFdBQVVBLElBQUksQ0FBQ0MsTUFBTCxFQUFWO0FBQUEsR0FQVSxDQUFkO0FBVUFDLEVBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlbkIsS0FBZixFQUFzQm9CLEdBQXRCLENBQTBCLFVBQUNDLElBQUQsRUFBVTtBQUFBLGdEQUNaQSxJQURZO0FBQUEsUUFDM0JDLElBRDJCO0FBQUEsUUFDckJDLEtBRHFCOztBQUVsQ2hCLElBQUFBLEtBQUssQ0FBQ2MsSUFBTixDQUFXQyxJQUFYLEVBQWlCQyxLQUFqQjtBQUNELEdBSEQ7QUFLQUwsRUFBQUEsTUFBTSxDQUFDQyxPQUFQLENBQWVsQixNQUFmLEVBQXVCbUIsR0FBdkIsQ0FBMkIsVUFBQ0ksS0FBRCxFQUFXO0FBQUEsaURBQ2RBLEtBRGM7QUFBQSxRQUM3QkYsSUFENkI7QUFBQSxRQUN2QkMsS0FEdUI7O0FBRXBDaEIsSUFBQUEsS0FBSyxDQUFDaUIsS0FBTixDQUFZRixJQUFaLEVBQWtCQyxLQUFsQjtBQUNELEdBSEQ7QUFLQWhCLEVBQUFBLEtBQUssQ0FBQ08sTUFBTixDQUFhLE9BQWIsRUFBc0JXLElBQXRCLENBQTJCdkIsS0FBM0I7QUFFQUssRUFBQUEsS0FBSyxDQUNGbUIsRUFESCxDQUNNLFdBRE4sRUFDbUJ2QixXQUFXLEdBQUdBLFdBQUgsR0FBaUIsSUFEL0MsRUFFR3VCLEVBRkgsQ0FFTSxVQUZOLEVBRWtCdEIsVUFBVSxHQUFHQSxVQUFILEdBQWdCLElBRjVDLEVBR0dzQixFQUhILENBR00sT0FITixFQUdlckIsT0FBTyxHQUFHQSxPQUFILEdBQWEsSUFIbkMsRUFJR3FCLEVBSkgsQ0FJTSxVQUpOLEVBSWtCcEIsYUFBYSxHQUFHQSxhQUFILEdBQW1CLElBSmxEO0FBTUEsU0FBTztBQUNMZ0IsSUFBQUEsSUFBSSxFQUFFLE9BREQ7QUFFTEssSUFBQUEsSUFBSSxFQUFFO0FBQUEsYUFDSnBCLEtBQUssQ0FBQ2MsSUFBTixDQUNFLFdBREYsRUFFRSxVQUNFTyxDQURGO0FBQUEsbUNBTWdCLElBQUksQ0FBTCxJQUFXQSxDQUFDLENBQUNDLE1BQUYsQ0FBU0MsQ0FBVCxHQUFhRixDQUFDLENBQUNHLE1BQUYsQ0FBU0QsQ0FBakMsQ0FOZixlQU9LLElBQUksQ0FBTCxJQUFXRixDQUFDLENBQUNDLE1BQUYsQ0FBU0csQ0FBVCxHQUFhSixDQUFDLENBQUNHLE1BQUYsQ0FBU0MsQ0FBakMsQ0FQSjtBQUFBLE9BRkYsQ0FESTtBQUFBO0FBRkQsR0FBUDtBQWdCRCxDQTFERDs7ZUE0RGVuQyxTIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY29tcG9uZW50cy9CbGFua0VkZ2UudHN4XG5cbmltcG9ydCB7IFJlYWN0Tm9kZSwgUmVhY3RUZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IHsgRDNFZGdlIH0gZnJvbSAndHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBlZGdlcz86IEQzRWRnZVtdO1xuICBkYXRhS2V5PzogKGQ6IEQzRWRnZSkgPT4gc3RyaW5nO1xuICBhdHRycz86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBzdHlsZXM/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgdGl0bGU/OiBzdHJpbmcgfCAoKGQ6IEQzRWRnZSkgPT4gc3RyaW5nIHwgUmVhY3RUZXh0KTtcbiAgb25Nb3VzZU92ZXI/OiAoZDogRDNFZGdlKSA9PiB2b2lkO1xuICBvbk1vdXNlT3V0PzogKGQ6IEQzRWRnZSkgPT4gdm9pZDtcbiAgb25DbGljaz86IChkOiBEM0VkZ2UpID0+IHZvaWQ7XG4gIG9uRG91YmxlQ2xpY2s/OiAoZDogRDNFZGdlKSA9PiB2b2lkO1xufVxuXG5jb25zdCBCbGFua0VkZ2UgPSAoe1xuICBlZGdlcyxcbiAgZGF0YUtleSxcbiAgYXR0cnMsXG4gIHN0eWxlcyxcbiAgdGl0bGUsXG4gIG9uTW91c2VPdmVyLFxuICBvbk1vdXNlT3V0LFxuICBvbkNsaWNrLFxuICBvbkRvdWJsZUNsaWNrLFxufTogUHJvcHMpOiBSZWFjdE5vZGUgJiB7XG4gIG5hbWU6IHN0cmluZztcbiAgdGljazogKCkgPT4gdm9pZDtcbn0gPT4ge1xuICBjb25zdCBibGFuayA9IGQzXG4gICAgLnNlbGVjdCgnLmVkZ2VzJylcbiAgICAuc2VsZWN0QWxsKCdnJylcbiAgICAuZGF0YShlZGdlcywgZGF0YUtleSlcbiAgICAuam9pbihcbiAgICAgIChlbnRlcikgPT4gZW50ZXIuYXBwZW5kKCdnJyksXG4gICAgICAodXBkYXRlKSA9PiB1cGRhdGUsXG4gICAgICAoZXhpdCkgPT4gZXhpdC5yZW1vdmUoKSxcbiAgICApO1xuXG4gIE9iamVjdC5lbnRyaWVzKGF0dHJzKS5tYXAoKGF0dHIpID0+IHtcbiAgICBjb25zdCBbbmFtZSwgdmFsdWVdID0gYXR0cjtcbiAgICBibGFuay5hdHRyKG5hbWUsIHZhbHVlIGFzIHN0cmluZyk7XG4gIH0pO1xuXG4gIE9iamVjdC5lbnRyaWVzKHN0eWxlcykubWFwKChzdHlsZSkgPT4ge1xuICAgIGNvbnN0IFtuYW1lLCB2YWx1ZV0gPSBzdHlsZTtcbiAgICBibGFuay5zdHlsZShuYW1lLCB2YWx1ZSBhcyBzdHJpbmcpO1xuICB9KTtcblxuICBibGFuay5hcHBlbmQoJ3RpdGxlJykudGV4dCh0aXRsZSBhcyBzdHJpbmcpO1xuXG4gIGJsYW5rXG4gICAgLm9uKCdtb3VzZW92ZXInLCBvbk1vdXNlT3ZlciA/IG9uTW91c2VPdmVyIDogbnVsbClcbiAgICAub24oJ21vdXNlb3V0Jywgb25Nb3VzZU91dCA/IG9uTW91c2VPdXQgOiBudWxsKVxuICAgIC5vbignY2xpY2snLCBvbkNsaWNrID8gb25DbGljayA6IG51bGwpXG4gICAgLm9uKCdkYmxjbGljaycsIG9uRG91YmxlQ2xpY2sgPyBvbkRvdWJsZUNsaWNrIDogbnVsbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnYmxhbmsnLFxuICAgIHRpY2s6ICgpID0+XG4gICAgICBibGFuay5hdHRyKFxuICAgICAgICAndHJhbnNmb3JtJyxcbiAgICAgICAgKFxuICAgICAgICAgIGQ6IEQzRWRnZSAmIHtcbiAgICAgICAgICAgIHNvdXJjZTogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9O1xuICAgICAgICAgICAgdGFyZ2V0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH07XG4gICAgICAgICAgfSxcbiAgICAgICAgKSA9PlxuICAgICAgICAgIGB0cmFuc2xhdGUoJHsoMSAvIDIpICogKGQuc291cmNlLnggKyBkLnRhcmdldC54KX0sICR7XG4gICAgICAgICAgICAoMSAvIDIpICogKGQuc291cmNlLnkgKyBkLnRhcmdldC55KVxuICAgICAgICAgIH0pYCxcbiAgICAgICksXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBCbGFua0VkZ2U7XG4iXX0=